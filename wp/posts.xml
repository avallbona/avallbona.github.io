<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->


<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Andreu Vallbona</title>
	<link>http://www.espontas.com</link>
	<description>Enthusiastic web developer</description>
	<pubDate>Sun, 03 Jun 2018 19:25:30 +0000</pubDate>
	<language>ca</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://www.espontas.com</wp:base_site_url>
	<wp:base_blog_url>http://www.espontas.com</wp:base_blog_url>

	<wp:author><wp:author_id>2</wp:author_id><wp:author_login><![CDATA[blogadmin]]></wp:author_login><wp:author_email><![CDATA[avallbona@gmail.com]]></wp:author_email><wp:author_display_name><![CDATA[admin]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	

	<item>
		<title>Formateig per defecte de les dates amb Django</title>
		<link>http://www.espontas.com/ca/2015/09/13/formateig-per-defecte-de-les-dates-amb-django/</link>
		<pubDate>Sun, 13 Sep 2015 20:32:00 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://www.espontas.com/?p=328</guid>
		<description></description>
		<content:encoded><![CDATA[Al principi de començar amb <strong>Django</strong> me vaig trobar amb el problema del format de les dates. Per a la part de frontend no és massa problemàtic ja que podem fixar noltros el format de cada data en particular. Per exemple:
[sourcecode language="python"]
&lt;p&gt;{% trans 'Fecha salida' %}: {{ reservation.departure_date_res|date:'d/m/Y' }}&lt;/p&gt;
[/sourcecode]
El problema sorgeix amb, per exemple, el format de les dates de l'administrador, el qual està determinat pels valors per defecte de django. <!--more-->

Aquests solen variar en funció de l'idioma de l'usuari i/o del navegador. Per corregir aquests fet, <strong>Django</strong> ens proporciona un mètode per poder fixar els formats per defecte de les dates. Al directori on està definit el projecte s'ha de creat una carpeta "formats" que contingui un directori per a cada idioma (es, ca, de, en, ...) i que, cadascuna d'aquestes  contingui un arxiu "formats.py" amb els formats de les dates. Per exemple:
<a href="http://www.espontas.com/wp-content/uploads/captura-date-formats.png"><img src="http://www.espontas.com/wp-content/uploads/captura-date-formats.png" alt="captura date formats" width="861" height="462" class="alignleft size-full wp-image-378" /></a>
Llavors al settings.py s'ha d'afegir una linia per indicar d'on s'ha d'agafar el format de les dates:

[sourcecode language="python"]
FORMAT_MODULE_PATH = 'balearictransfer.formats'
[/sourcecode]

També es poden indicar el format de les dates pels "inputs" de les dates, així com el separador decimal o de mils, per exemple:

[sourcecode language="python"]
DATE_INPUT_FORMATS = (
    '%d-%m-%Y',     # '21-03-2014'
)
TIME_INPUT_FORMATS = (
    '%H:%M:%S',     # '17:59:59'
    '%H:%M',        # '17:59'
)
DATETIME_INPUT_FORMATS = (
    '%d-%m-%Y %H:%M',     # '21-03-2014 17:59'
)

DECIMAL_SEPARATOR = u'.'
THOUSAND_SEPARATOR = u','
NUMBER_GROUPING = 3
[/sourcecode]

A <strong>Github</strong> podeu trobar un <a href="https://github.com/andilabs/demo_time_set" target="_blank">projecte de mostra</a> que explica com funciona el tema. I també la <a href="http://stackoverflow.com/a/22565251" target="_blank">pertinent explicació</a> a <strong>Stack Overflow</strong>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>328</wp:post_id>
		<wp:post_date><![CDATA[2015-09-13 21:32:00]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-13 20:32:00]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[formateig-per-defecte-de-les-dates-amb-django]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="language" nicename="ca"><![CDATA[Català]]></category>
		<category domain="post_tag" nicename="date-format"><![CDATA[date format]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="category" nicename="feina"><![CDATA[Feina]]></category>
		<category domain="post_tag" nicename="strftime"><![CDATA[strftime]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[378]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Django extra views</title>
		<link>http://www.espontas.com/ca/2015/09/12/django-extra-views/</link>
		<pubDate>Sat, 12 Sep 2015 19:56:24 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://www.espontas.com/?p=329</guid>
		<description></description>
		<content:encoded><![CDATA["<strong><a href="https://github.com/AndrewIngram/django-extra-views" target="_blank">Django extra views</a></strong>" ens proporciona una manera fàcil, a través de les seves vistes "vitaminades", d'implementar els "<strong><a href="https://docs.djangoproject.com/en/1.8/topics/forms/formsets/" target="_blank">formsets</a></strong>" per tal d'editar les relacions 1-n amb Django. Tambe tenir <strong><a href="https://github.com/pretix/django-formset-js">django-formset-js</a></strong> que ens "dinamitza" a través de Javascript la inserció i eliminació de tuples dels<strong> "formsets"</strong>.<!--more-->



Per instal.lar les "django extra views" cal executar:

[sourcecode language="bash" wraplines="false" collapse="false"]
pip install django-extra-views
[/sourcecode]

Per instal.lar django-formset-js cal executar:
[sourcecode language="bash" wraplines="false" collapse="false"]
pip install django-formset-js
[/sourcecode]
i afegir l'aplicació al projecte:
[sourcecode language="python" wraplines="false" collapse="false"]
INSTALLED_APPS = (
    ...
    'djangoformsetjs',
)
[/sourcecode]

Detallant els passos, que serien:
<strong>Views</strong>:

[sourcecode language="python" wraplines="false" collapse="false"]
# -*- encoding: utf-8 -*-

from crispy_forms.helper import FormHelper
from crispy_forms.layout import Layout
from crispy_forms.layout import Div

from django import forms

from extra_views import CreateWithInlinesView, UpdateWithInlinesView, InlineFormSet
from backoffice.cars.models import AssuranceFeaturePrice, EquipmentPrice, ChargePrice
from cms.cmscars.office.forms import AssuranceFeaturePriceForm, EquipmentPriceForm, ChargePriceForm

#########
# views #
#########

class AssuranceFeaturePricesInline(InlineFormSet):
    model = AssuranceFeaturePrice
    form_class = AssuranceFeaturePriceForm
    extra = 0


class EquipmentPricesInline(InlineFormSet):
    model = EquipmentPrice
    form_class = EquipmentPriceForm
    extra = 0


class ChargePricesInline(InlineFormSet):
    model = ChargePrice
    form_class = ChargePriceForm
    extra = 0


class OfficeCreateView(CreateWithInlinesView):
    inlines = [AssuranceFeaturePricesInline, EquipmentPricesInline, ChargePricesInline]
    pass


class OfficeUpdateView(UpdateWithInlinesView):
    inlines = [AssuranceFeaturePricesInline, EquipmentPricesInline, ChargePricesInline]
    pass
[/sourcecode]

<strong>Forms</strong>:

[sourcecode language="python" wraplines="false" collapse="false"]
class AssuranceFeaturePriceForm(forms.ModelForm):

    class Meta:
        model = AssuranceFeaturePrice
        fields = ('id', 'office', 'feature', 'price')

    @property
    def helper(self):
        helper = FormHelper()
        helper.label_class = 'col-xs-4'
        helper.field_class = 'col-xs-6'
        helper.form_tag = False
        helper.layout = Layout(
            'id', 'office', 'feature', 'price',
            Div('DELETE', css_class='hidden')
        )
        return helper


class EquipmentPriceForm(forms.ModelForm):

    class Meta:
        model = EquipmentPrice
        fields = ('id', 'office', 'equipment', 'price')

    @property
    def helper(self):
        helper = FormHelper()
        helper.label_class = 'col-xs-4'
        helper.field_class = 'col-xs-6'
        helper.form_tag = False
        helper.layout = Layout(
            'id', 'office', 'equipment', 'price',
            Div('DELETE', css_class='hidden')
        )
        return helper


class ChargePriceForm(forms.ModelForm):

    class Meta:
        model = ChargePrice
        fields = ('id', 'office', 'charge', 'price')

    @property
    def helper(self):
        helper = FormHelper()
        helper.label_class = 'col-xs-4'
        helper.field_class = 'col-xs-6'
        helper.form_tag = False
        helper.layout = Layout(
            'id', 'office', 'charge', 'price',
            Div('DELETE', css_class='hidden')
        )
        return helper

[/sourcecode]

<strong>Template</strong>:

[sourcecode language="python" wraplines="false" collapse="false"]
############
# template #
############

{% block content2 %}
    {{ form.media }}

&lt;form id=&quot;form-office&quot; method=&quot;post&quot; action=&quot;{% if object %}{% url update_url smydestination object.pk %}{% else %}{% url create_url smydestination %}{% endif %}&quot; class=&quot;form-horizontal&quot;&gt;
        {{ form.errors }}
        {% crispy form %}
        &lt;!-- formsets --&gt;

&lt;div id=&quot;initial-precios&quot; class=&quot;x_panel col-md-offset-2 col-md-7&quot;&gt;
            {% for formset in inlines %}

&lt;div id=&quot;container-{{ formset.prefix }}&quot;&gt;

&lt;div class=&quot;x_title&quot;&gt;

&lt;h4&gt;{% show_formset_name formset %}&lt;/h4&gt;

                    &lt;/div&gt;


&lt;div class=&quot;formset well&quot; data-formset-prefix=&quot;{{ formset.prefix }}&quot;&gt;

&lt;div class=&quot;errors&quot;&gt;{{ formset.non_form_errors }}&lt;/div&gt;

                        {{ formset.management_form }}

&lt;div data-formset-body&gt;
                            {% for item in formset %}

&lt;div class=&quot;formset_item form-inline&quot; data-formset-form&gt;
                                    {% crispy item %}
                                    &lt;button type=&quot;button&quot; data-formset-delete-button class=&quot;btn btn-danger pull-right&quot;&gt;&lt;i class=&quot;fa fa-trash&quot;&gt;&lt;/i&gt; {% trans 'Borrar' %}&lt;/button&gt;
                                &lt;/div&gt;

                            {% endfor %}
                        &lt;/div&gt;

                        &lt;script type=&quot;form-template&quot; data-formset-empty-form&gt;
                        {% escapescript %}

&lt;div class=&quot;formset_item form-inline&quot; data-formset-form&gt;
                                {% crispy formset.empty_form %}
                                &lt;button type=&quot;button&quot; data-formset-delete-button class=&quot;btn btn-danger pull-right&quot;&gt;&lt;i class=&quot;fa fa-trash&quot;&gt;&lt;/i&gt; {% trans 'Borrar' %}&lt;/button&gt;
                            &lt;/div&gt;

                        {% endescapescript %}
                        &lt;/script&gt;
                        &lt;a class=&quot;btn btn-success&quot; data-formset-add&gt;
                            &lt;i class=&quot;fa fa-plus-square-o&quot;&gt;&lt;/i&gt; {% trans 'Añadir registro' %}
                        &lt;/a&gt;
                    &lt;/div&gt;

                &lt;/div&gt;

            {% endfor %}
        &lt;/div&gt;

        &lt;!-- fin formsets --&gt;
    &lt;/form&gt;

{% endblock content2 %}

{% block extrajs %}
    &lt;script type=&quot;text/javascript&quot; src=&quot;{% static 'js/jquery.formset.min.js' %}&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        //&lt;![CDATA[ $(function($) { $(&quot;.formset&quot;).formset({ animateForms: true, reorderMode: 'none', }); }); //]]&gt;
    &lt;/script&gt;
{% endblock %}
[/sourcecode]

A aquest exemple també es fa ús de <a href="http://django-crispy-forms.readthedocs.org/en/latest/" target="_blank">Crispy Forms</a>, per tal de millorar l'aparença dels formularis. Per instal.lar-ho:

[sourcecode language="python" wraplines="false" collapse="false"]
pip install --upgrade django-crispy-forms
[/sourcecode]
i afegir l'aplicació al projecte:
[sourcecode language="python" wraplines="false" collapse="false"]
INSTALLED_APPS = (
    ...
    'crispy_forms',
)
[/sourcecode]

En aquest cas hi ha varis "formsets" relacionats amb el model principal. Per qüestió d'usabilitat s'ha implementat el formset dins un "Tab" del formulari principal. L'exemple exposat queda segons es mostra a l'imatge.

<a href="http://www.espontas.com/wp-content/uploads/captura_formsets_cropped.png"><img class="alignleft size-large wp-image-344" src="http://www.espontas.com/wp-content/uploads/captura_formsets_cropped-1024x699.png" alt="captura_formsets_cropped" width="660" height="451" /></a>

Per aprofondir en els paquets citats a l'exemple es recomana visitar els enllaços als mateixos.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>329</wp:post_id>
		<wp:post_date><![CDATA[2015-09-12 20:56:24]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-12 19:56:24]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[django-extra-views]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="language" nicename="ca"><![CDATA[Català]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django-extra-viwws"><![CDATA[django extra viwws]]></category>
		<category domain="post_tag" nicename="django-formset-js"><![CDATA[django formset js]]></category>
		<category domain="category" nicename="feina"><![CDATA[Feina]]></category>
		<category domain="post_tag" nicename="formset"><![CDATA[formset]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_thumbnail_id]]></wp:meta_key>
			<wp:meta_value><![CDATA[344]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>About development</title>
		<link>http://www.espontas.com/ca/2015/09/13/368/</link>
		<pubDate>Sun, 13 Sep 2015 11:27:25 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://www.espontas.com/?p=368</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>"Top notch development teams don't torture their programmers. Even minor frustrations caused by using underpowered tools add up, making programmers grumpy and unhappy. And a grumpy programmer is an unproductive programmer." - Joel Spolsky, from the "<a href="http://www.joelonsoftware.com/articles/fog0000000043.html" target="_blank">Joel Test</a>".</blockquote>

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>368</wp:post_id>
		<wp:post_date><![CDATA[2015-09-13 12:27:25]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-09-13 11:27:25]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[368]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="language" nicename="ca"><![CDATA[Català]]></category>
		<category domain="category" nicename="feina"><![CDATA[Feina]]></category>
		<category domain="post_format" nicename="post-format-quote"><![CDATA[Citació]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Customització de backend d&#039;autenticació amb Django</title>
		<link>http://www.espontas.com/ca/2015/12/30/customitzacio-de-backend-dautenticacio-amb-django/</link>
		<pubDate>Wed, 30 Dec 2015 09:11:26 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://www.espontas.com/?p=386</guid>
		<description></description>
		<content:encoded><![CDATA[Per defecte Django empra el backend d'autenticació "ModelBackend"

[sourcecode language="python"]
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)
[/sourcecode]

Aquest "backend" intenta autenticara partir del nom d'usuari i la contrasenya que reb. Nogensmenys es pot donar el cas que vulguem autenticar a partir de l'email de l'usuari.<!--more-->

 Per aquest cas ho podem fer estenent la classe "ModelBackend" i reimplementant el mètode autenticate:

[sourcecode language="python"]
class MyCustomEmailAuthBackend(ModelBackend):
    &quot;&quot;&quot;
    Allow users to log in with their email address
    &quot;&quot;&quot;

    def authenticate(self, email=None, password=None, **kwargs):

        if email is None or password is None:
            return None

        try:
            user = User.objects.get(email=email)
            if user.check_password(password):
                return user
        except User.DoesNotExist:
            return None
[/sourcecode]

Un cop que tenim el backend implementat l'hem d'afegir als "settings" per tal que Django ho tingui en compte:

[sourcecode language="python"]
AUTHENTICATION_BACKENDS = (
        'authentication.MyCustomEmailAuthBackend',
        'django.contrib.auth.backends.ModelBackend',
    )
[/sourcecode]
Aleshores si el nostre formulari posteja l'email i la contrasenya ja ens podrem autenticar.

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>386</wp:post_id>
		<wp:post_date><![CDATA[2015-12-30 10:11:26]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-30 09:11:26]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[customitzacio-de-backend-dautenticacio-amb-django]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="language" nicename="ca"><![CDATA[Català]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="feina"><![CDATA[Feina]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Detecció idioma per subdomini en Django</title>
		<link>http://www.espontas.com/ca/2015/12/30/deteccio-idioma-per-subdomini-en-django/</link>
		<pubDate>Wed, 30 Dec 2015 10:20:42 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://www.espontas.com/?p=392</guid>
		<description></description>
		<content:encoded><![CDATA[Django ens proporciona eines per detectar i fixar l'idioma de la nostra aplicació. Normalment es fa servir <strong><a href="https://docs.djangoproject.com/en/1.9/topics/i18n/translation/" target="_blank">i18n_patterns</a></strong> a través del qual s'encapsulen les urls amb el mateix per tal que ens fixi a l'inici del path de la url el codi d'idioma. Amb el middleware que explicarem no cal fer servir l'<strong>i18n_patterns</strong> ja que serà el pròpi "middleware" que detectarà i fixarà l'idioma de l'aplicació. <!--more-->



Primer de tot crearem l'arxiu que contindrà el "middleware":

[sourcecode language="python"]

# -*- encoding: utf-8 -*-

from django.utils import translation
from django.conf import settings

class SubdomainLanguageMiddleware(object):
    &quot;&quot;&quot;
    Set the language for the site based on the subdomain the request
    is being served on. For example, serving on 'fr.domain.com' would
    make the language French (fr).
    &quot;&quot;&quot;
    language_codes = [it[0] for it in settings.LANGUAGES]

    def process_request(self, request):
        try:
            lang = request.get_host().split('.')[0]
        except IndexError:
            lang = self.language_codes[0]
        if lang == 'www':
            lang = self.language_codes[0]
        if lang and lang in self.language_codes:
            translation.activate(lang)
            request.LANGUAGE_CODE = lang

[/sourcecode]

Fixem-nos en el cas que no s'ens indica cap codi d'idioma i ens ve "www", que fixem el primer idioma per defecte definit als "settings.py".

Llavors, als "settings.py" hem de tenir configurats els idiomes amb els quals volem fer feina:

[sourcecode language="python"]
LANGUAGES = (
    ('ca', 'Català'),
    ('es', 'Español'),
    ('de', 'Deutsch'),
    ('en', 'English'),
)
[/sourcecode]

i, com a darrer pas, li hem d'indicar als "settings.py" que ens agafi el "middleware" que acabem de crear:

[sourcecode language="python"]
MIDDLEWARE_CLASSES = (
    ...,
    'myproject.language_middleware.SubdomainLanguageMiddleware',
)
[/sourcecode]

Llavors ja podrem accedir a la web fixant l'idioma en el subdomini:

[sourcecode language="html"]
http://www.lamevaweb.com
http://es.lamevaweb.com
http://de.lamevaweb.com
http://en.lamevaweb.com
[/sourcecode]
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>392</wp:post_id>
		<wp:post_date><![CDATA[2015-12-30 11:20:42]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-30 10:20:42]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[deteccio-idioma-per-subdomini-en-django]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="language" nicename="ca"><![CDATA[Català]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="category" nicename="feina"><![CDATA[Feina]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_539792994b417bdd7dba68b088afaa29]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_e6c8ffb842722c08b7eb0916cc92cc7d]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_ed61a70fa03384d7adc79c9c63145730]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_8629ac47c57feb4358207511765462bc]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_0f8c03c06e4398238d4b99cf3d59cd5c]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_00ba4d3ed98399c15260609e3a63ac50]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_72bd8a59fab341525bda86e3c3bd3d3a]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_99ffb3b3e78d97d5d1024b4ccbc00d27]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_cbedfebd30539b6db325730b5f47a380]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_6605acb82ef991a92f5982d2e3ce4163]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_e3b0ba09c8ae4a997e915f0a25c9acf6]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_aa544ae1ec65545964e7118e22dadb46]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Encadenar select&#039;s Html amb Django de manera fàcil i poc intrussiva</title>
		<link>http://www.espontas.com/ca/2015/12/30/encadenar-selects-html-amb-django-de-manera-facil-i-poc-intrussiva/</link>
		<pubDate>Wed, 30 Dec 2015 14:05:54 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://www.espontas.com/?p=406</guid>
		<description></description>
		<content:encoded><![CDATA[Fa un temps que he descobert un "plugin" jQuery que va força be per encadenar <em>select</em>'s Html amb Django, és a dir, que les opcións d'un <em>select</em> s'actualitzin en funció del valor seleccionat a un primer <em>select</em>. El "plugin" en qüestió és diu <strong><a href="http://www.appelsiini.net/projects/chained" target="_blank">Chained Selects Plugin for jQuery and Zepto</a></strong>. Per fer-lo servir simplement hem d'estendre el "widget" per defecte per representar els <em>select</em>'s html en Django.<!--more-->

La idea és crear codi html per tal que es mostri similar a la següent manera, és a dir, que la clau dels valors del primer select es fixin com a css class dels options del segon select.

[sourcecode language="html"]
&lt;select id=&quot;mark&quot; name=&quot;mark&quot;&gt;
  &lt;option value=&quot;&quot;&gt;--&lt;/option&gt;
  &lt;option value=&quot;bmw&quot;&gt;BMW&lt;/option&gt;
  &lt;option value=&quot;audi&quot;&gt;Audi&lt;/option&gt;
&lt;/select&gt;
&lt;select id=&quot;series&quot; name=&quot;series&quot;&gt;
  &lt;option value=&quot;&quot;&gt;--&lt;/option&gt;
  &lt;option value=&quot;series-3&quot; class=&quot;bmw&quot;&gt;3 series&lt;/option&gt;
  &lt;option value=&quot;series-5&quot; class=&quot;bmw&quot;&gt;5 series&lt;/option&gt;
  &lt;option value=&quot;series-6&quot; class=&quot;bmw&quot;&gt;6 series&lt;/option&gt;
  &lt;option value=&quot;a3&quot; class=&quot;audi&quot;&gt;A3&lt;/option&gt;
  &lt;option value=&quot;a4&quot; class=&quot;audi&quot;&gt;A4&lt;/option&gt;
  &lt;option value=&quot;a5&quot; class=&quot;audi&quot;&gt;A5&lt;/option&gt;
&lt;/select&gt;
[/sourcecode]

Aixi doncs per fer que aixo sigui possible en Django estendrem i customitzarem el widget <em>Select</em> que ve per defecte amb django.forms. 

[sourcecode language="python"]
# -*- encoding: utf-8 -*-

from django.forms.widgets import Select
from django.utils.encoding import force_text
from django.utils.html import format_html
from django.utils.safestring import mark_safe


class CustomSelect(Select):
    &quot;&quot;&quot;
    Custom widget used in combination with http://www.appelsiini.net/projects/chained
    in order to have two or more related html select's. Whenever the first select is changed updates
    the options of the related one
    &quot;&quot;&quot;

    def render_option(self, selected_choices, option_value, option_label):
        if option_value is None or option_value == '':
            option_value = ''
            css_class = ''
        else:
            css_class, option_value = option_value.split('___')

        option_value = force_text(option_value)

        if option_value in selected_choices:
            selected_html = mark_safe(' selected=&quot;selected&quot;')
            if not self.allow_multiple_selected:
                # Only allow for a single selection.
                selected_choices.remove(option_value)
        else:
            selected_html = ''
        return format_html('&lt;option value=&quot;{0}&quot;{1} class=&quot;{2}&quot;&gt;{3}&lt;/option&gt;', option_value, selected_html,
                           mark_safe(css_class), force_text(option_label))

[/sourcecode]

Llavors el nostre formulari ha de fer ús del "widget" customitzat. En el formulari hem de parar atenció als camps "group" i "type". El camp "type" depen del valor seleccionat a "group". Per a cada valor de "group" hi ha una sèrie de valors a "type". Cada cop que el select de "group" s'actualitzi, es canvii, es recalcularan els valors de "type". Aquesta és la clau del problema, el valor de l'option del segon selector ha d'esser processat per tal d'extreure'n el propi valor de l'option així com el valor de l'element pare dins el primer selector. És per això que al mètode __init__ del formulari customitzam l'atribut "choices" del widget del camp "type", per passar el valor en el format:

<code>clau-option-select-dependent__clau-option-valor-pare</code>

[sourcecode language="python"]
class ProductFilter(FilterFormMixin, django_filters.FilterSet):

    by_name = django_filters.CharFilter(lookup_type='icontains', name='translations__name',
                                        required=False, label=_('Nombre'))

    code = django_filters.CharFilter(required=False, label=_('Código'))

    place = django_filters.ModelChoiceFilter(queryset=Place.objects.all(), required=False,
                                             empty_label=_('Todos los recintos'), name='product_places')

    group = django_filters.ModelChoiceFilter(queryset=GroupProductType.objects.all(), required=False,
                                             name='type__group', empty_label=_('Todos los grupos'))

    type = django_filters.ChoiceFilter(choices=(), required=False, label=_('Todos los tipos'))

    tags = NamedModelMultipleChoiceField(queryset=Tag.objects.all(), required=False, label=_(u'Seleccione algún tag'))

    ENABLED_CHOICES = (
        ('all', _('Todos')),
        ('si', _('Activos')),
        ('no', _('Inactivos')),
    )
    enabled = django_filters.MethodFilter(required=False, label=_('Estado'),
                                          action='filter_enabled', widget=forms.Select(choices=ENABLED_CHOICES))

    @staticmethod
    def filter_enabled(queryset, value):
        if value == 'all':
            return queryset
        return queryset.filter(enabled=value == 'si')

    class Meta:
        model = Product
        fields = ('by_name', 'code', 'place', 'group', 'type', 'tags', 'enabled')

    def __init__(self, data=None, queryset=None, prefix=None, strict=None):

        choices = [('', _(u'Todos los tipos'))]
        choices += [('{0}___{1}'.format(it.group_id, it.pk), it.name) for it in ProductType.objects.order_by('name')]
        self.base_filters['type'].field.widget = CustomSelect(choices=choices)
        super().__init__(data, queryset, prefix, strict)

[/sourcecode]

Per gestionar l'event del canvi hem de modificar el template que renderitza el formulari. D'aquesta manera incloem el Javascript necessari, el codi del propi plugin i el codi que s'encarrega de relacionar els dos selectors. 

[sourcecode language="javascript"]
{% block extrajs2 %}
    &lt;script type=&quot;text/javascript&quot; src=&quot;{% static 'bower_components/chained/jquery.chained.min.js' %}&quot;&gt;&lt;/script&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        $(function(){
            $(&quot;#id_type&quot;).chained(&quot;#id_group&quot;);
        });
    &lt;/script&gt;
{% endblock extrajs2 %}
[/sourcecode]

A l'exemple li deim que el selector amb identificador "#id_type" depen del selector amb identificador "#id_group". Finalment senyalar que el plugin és bastant versàtil ja que permet enllaçar varis selectors a la vegada amb la mateixa tècnica. 

<a href="http://www.appelsiini.net/projects/chained">http://www.appelsiini.net/projects/chained</a>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>406</wp:post_id>
		<wp:post_date><![CDATA[2015-12-30 15:05:54]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2015-12-30 14:05:54]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[encadenar-selects-html-amb-django-de-manera-facil-i-poc-intrussiva]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="language" nicename="ca"><![CDATA[Català]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="category" nicename="feina"><![CDATA[Feina]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[Javascript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jQuery]]></category>
		<category domain="post_tag" nicename="select"><![CDATA[Select]]></category>
		<category domain="post_tag" nicename="widget"><![CDATA[Widget]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Frasses</title>
		<link>http://www.espontas.com/ca/2016/01/05/429/</link>
		<pubDate>Tue, 05 Jan 2016 08:22:10 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://www.espontas.com/?p=429</guid>
		<description></description>
		<content:encoded><![CDATA["Most good programmers do programming not because they expect to get paid or get adulation by the public, but because it is fun to program". - Linus Torvalds]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>429</wp:post_id>
		<wp:post_date><![CDATA[2016-01-05 09:22:10]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-05 08:22:10]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[429]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="language" nicename="ca"><![CDATA[Català]]></category>
		<category domain="post_format" nicename="post-format-quote"><![CDATA[Citació]]></category>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>&quot;Lookup fields&quot; customitzats en Django</title>
		<link>http://www.espontas.com/ca/2016/01/05/lookups-customitzats-en-django/</link>
		<pubDate>Tue, 05 Jan 2016 08:52:38 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://www.espontas.com/?p=433</guid>
		<description></description>
		<content:encoded><![CDATA[Django, de manera genèrica, ens proveeix una API del seu ORM a través de la qual ens permet executar els "<a href="https://docs.djangoproject.com/en/1.9/ref/models/querysets/">querysets</a>" que necessitem de manera més o menys optima. Malgrat això, es pot donar el cas que necessitem realitzar algun tipus de consulta una mica més customitzada o millorada. Per a tal efecte, disposem de tota una sèrie d'eines, ja siguin els <a href="https://docs.djangoproject.com/en/1.9/ref/models/querysets/#q-objects">objectes Q</a>, les <a href="https://docs.djangoproject.com/en/1.7/ref/models/queries/#django.db.models.F">expressions F</a>, els <a href="https://docs.djangoproject.com/en/1.9/topics/db/queries/#field-lookups">Field Lookups</a>, etc. Sobre aquest darrer grup, els <strong>Field lookup</strong>'s tenim la possibilitat de definir els nostres propis.<!--more-->

Per a implementar un "Lookup field" hem d'implementar una classe que ens permeti personalitzar la part esquerra i la part dreta de la clàusula sql. Es fa estenent la classe <code>Lookup</code> del paquet "<code>django.db.models.fields.Lookup</code>" i, posteriorment, registrant aquest classe personalitzada amb el mètode <code>register_lookup</code> de la classe <code>django.db.models.fields.Field</code>. E.g.:

[sourcecode language="python"]
from django.db.models import Lookup
from django.db.models.fields import Field


class Lower(Lookup):
    &quot;&quot;&quot;
    Custom lookup for postgres &quot;lower&quot; function implementation
    &quot;&quot;&quot;

    lookup_name = 'lower'

    def as_sql(self, qn, connection):

        lhs, lhs_params = self.process_lhs(qn, connection)
        rhs, rhs_params = self.process_rhs(qn, connection)
        params = lhs_params + rhs_params
        return 'lower({}) = {}'.format(lhs, rhs), params

Field.register_lookup(Lower)
[/sourcecode]

L'exemple en concret implementa la funcionalitat de comparar el contingut d'un camp en minúscula amb la cadena que nosaltres li passem. Hi ha varis punts importants:

<code>lookup_name = 'lower'</code>
Defineix el nom que emprarem per executar la clàusula.

<code>lhs, lhs_params = self.process_lhs(qn, connection)</code>
Compila la part esquerra de la clàusula

<code>rhs, rhs_params = self.process_rhs(qn, connection)</code>
Compila la part dreta de la clàusula

<code>Field.register_lookup(Lower)</code>
Registrem el custom lookup per tal de poder-lo emprar.

Finalment, un exemple d'ús del nostre custom lookup seria:

[sourcecode language="python"]
try:
    task = TransTask.objects.filter(object_class__lower=class_name).get()
except TransTask.DoesNotExist:
    task = None
[/sourcecode]

<code>object_class__lower=class_name</code>
és la part on s'aplica el "custom lookup". Compararà el contingut en minúscula del camp <code>object_class</code> amb el contingut de la variable <code>class_name</code>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>433</wp:post_id>
		<wp:post_date><![CDATA[2016-01-05 09:52:38]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-05 08:52:38]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[lookups-customitzats-en-django]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="language" nicename="ca"><![CDATA[Català]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="category" nicename="feina"><![CDATA[Feina]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Afegir concurrència a comandes de Django</title>
		<link>http://www.espontas.com/ca/2016/01/28/afegir-concurrencia-a-comandes-de-django/</link>
		<pubDate>Thu, 28 Jan 2016 15:58:08 +0000</pubDate>
		<dc:creator><![CDATA[blogadmin]]></dc:creator>
		<guid isPermaLink="false">http://www.espontas.com/?p=459</guid>
		<description></description>
		<content:encoded><![CDATA[<img src="http://www.espontas.com/wp-content/uploads/gif_python.gif" alt="Python Concurrency" width="320" height="180" class="alignright size-full wp-image-475" />En algunes ocasions he hagut d'implementar alguna comanda de <strong>Django</strong> per tal de realitzar alguna tasca de manteniment. El procés sól esser, en moltes ocasions, el mateix. Processar secuencialment un número d'objectes. El problema és que quan s'executa la comanda es sol emprar un sol procés en un sol core. Això té l'inconvenient que, si el número d'objectes a tractar és molt gran, la comanda tarda considerablement.<!--more-->

Per posar un exemple. Una comanda que processa un model simple de Django amb 340.000 registres. L'operació a executar és comptar el número de paraules d'un camp de text i desar aquest número dins un camp del propi model. Emprant l'ORM de Django no ens permet d'executar l'operació al mateix temps que es llegeix, no podem fer un "update" executant una funció Python. Per aquest motiu, hem de, primer llegir el registre, calcular el número de paraules i llavors, en un segon pas, actualitzar el número de paraules sobre cada registre. D'aquesta manera ens queda que hem d'executar una sentència "update" d'sql per a cada registre.

Una possible implementació de la comanda podria esser la següent:
[sourcecode language="python"]

# -*- encoding: utf-8 -*-

from django.core.management.base import BaseCommand
from ...models import TransTask
from ...utils import get_num_words


class Command(BaseCommand):
    help = &quot;Update the number of words of the tasks&quot;

    def handle(self, *args, **options):
        self.stdout.write('Reading tasks...')
        pairs = []
        for it in TransTask.objects.all():
            pairs.append({'id': it.id, 'num': get_num_words(it.object_field_value)})

        for item in pairs:
            TransTask.objects.filter(pk=item['id']).update(number_of_words=item['num'])

        self.stdout.write('end')

[/sourcecode]

Emprant el suport per "<strong>Threads</strong>" de Python 3.4, una possible solució podria esser la següent:
[sourcecode language="python"]
# -*- encoding: utf-8 -*-

from queue import Queue, Empty
from threading import Lock, Thread

from django.core.management.base import BaseCommand
from ...models import TransTask
from ...utils import get_num_words


class Command(BaseCommand):
    help = &quot;Update the number of words of the tasks&quot;

    lock = Lock()
    queue = Queue()
    num_threads = 80
    threads = []

    def handle(self, *args, **options):
        self.queue = Queue()
        self.stdout.write('Reading tasks...')
        for it in TransTask.objects.all():
            self.queue.put({'id': it.id, 'num': get_num_words(it.object_field_value)})

        for i in range(self.num_threads):
            t = Thread(target=self.worker_elements)
            t.start()
            self.threads.append(t)
        self.stdout.write(&quot;Waiting for empty queue&quot;)
        self.queue.join()
        self.stop_threads()

    def stop_threads(self):
        for t in self.threads:
            t.join()
        self.stdout.write('Exiting main thread')

    def worker_elements(self):
        while not self.queue.empty():
            try:
                item = self.queue.get(timeout=2)
                TransTask.objects.filter(pk=item['id']).update(number_of_words=item['num'])
            except Empty:
                break
            finally:
                self.queue.task_done()

[/sourcecode]
Aquesta solució el que fá és, definir una cua ("<strong>Queue</strong>") a la quan anem desant els elements a processar i llavors definir una sèrie de "<strong>Threads</strong>", cadascún dels qual va desencuant els elements per tal de processar-los. D'aquesta manera aconseguim una "pseudo concurrència" a l'hora d'anar actualitzant la base de dades.

Per a processar un total d'uns 340.000 registres, la primera versió va tardar uns 22 min i 55 seg. Amb la segona versió, la multithreaded, va tardar 57 seg. Executades les dues versions amb la mateixa màquina i mateixes condicions.

Cal mencionar que, en realitat no estem afegint paralel.lisme, ja que només hi ha un thread executant-se a la vegada gràcies al <a href="https://wiki.python.org/moin/GlobalInterpreterLock" target="_blank">GIL</a> de Python. Aquest segon exemple és més ràpid ja que mentres un thread està esperant, per a mor de la connexió base de dades, s'arranca un altre thread que estigui disponible per processar un altre element.

Enllaços relacionats:
<a href="http://www.tutorialspoint.com/python/python_multithreading.htm">http://www.tutorialspoint.com/python/python_multithreading.htm</a>
<a href="http://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python">http://www.toptal.com/python/beginners-guide-to-concurrency-and-parallelism-in-python</a>
<a href="http://www.tutorialspoint.com/python/python_multithreading.htm">http://www.tutorialspoint.com/python/python_multithreading.htm</a>



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>459</wp:post_id>
		<wp:post_date><![CDATA[2016-01-28 16:58:08]]></wp:post_date>
		<wp:post_date_gmt><![CDATA[2016-01-28 15:58:08]]></wp:post_date_gmt>
		<wp:comment_status><![CDATA[open]]></wp:comment_status>
		<wp:ping_status><![CDATA[open]]></wp:ping_status>
		<wp:post_name><![CDATA[afegir-concurrencia-a-comandes-de-django]]></wp:post_name>
		<wp:status><![CDATA[publish]]></wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type><![CDATA[post]]></wp:post_type>
		<wp:post_password><![CDATA[]]></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="language" nicename="ca"><![CDATA[Català]]></category>
		<category domain="category" nicename="django"><![CDATA[Django]]></category>
		<category domain="post_tag" nicename="django"><![CDATA[django]]></category>
		<category domain="post_tag" nicename="python"><![CDATA[python]]></category>
		<category domain="category" nicename="python"><![CDATA[Python]]></category>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_syntaxhighlighter_encoded]]></wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_edit_last]]></wp:meta_key>
			<wp:meta_value><![CDATA[2]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_6bc64475f1aa46338b50048829c997a2]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[_oembed_3d8dc3f99e8b51b59a99e906b4d4d693]]></wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key><![CDATA[wpv_]]></wp:meta_key>
			<wp:meta_value><![CDATA[a:2:{s:7:"version";s:4:"1.10";s:3:"url";s:0:"";}]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
